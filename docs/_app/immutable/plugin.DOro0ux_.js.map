{"version":3,"file":"plugin.DOro0ux_.js","sources":["../../../../../src/plugin.ts"],"sourcesContent":["/*\n  Copyright (c) 2024 Charly Schmidt aka Picorims<picorims.contact@gmail.com>,\n\n  This Source Code Form is subject to the terms of the Mozilla Public\n  License, v. 2.0. If a copy of the MPL was not distributed with this\n  file, You can obtain one at http://mozilla.org/MPL/2.0/.\n*/\n\n// EXPORTS AND IMPORTS ARE NOT ALLOWED IN THIS FILE, EXCEPT FOR TYPE IMPORTS.\n// DOING SO WILL **BREAK** THE PLUGIN,\n// AS THEY ARE CURRENTLY NOT SUPPORTED BY PENPOT!.\n// By convention, all code copied elements (instead of being imported)\n// uses the suffix \"_IC\".\n\nimport type { PenpotEvent } from '$lib/types/plugin_events';\nimport type { GenericRule, Pattern_v1, Rule, RuleKind } from '$lib/types/pattern';\nimport type { Board, Shape } from '@penpot/plugin-types';\n\nconst VERBOSE = false;\n\nenum PluginEvents_IC {\n\tNO_SELECTION = 'no-selection',\n\tONE_SELECTION = 'one-selection',\n\tMULTIPLE_SELECTION = 'multiple-selection',\n\tPATTERN_SELECTED = 'pattern-selected',\n\tPONG = 'pong',\n\tERROR = 'error',\n\tSEND_PATTERN = 'send-pattern',\n\tACKNOWLEDGE_UPDATE_PATTERN = 'acknowledge-update-pattern',\n\tSEND_PROGRESSION = 'send-progression'\n}\n\nenum UIEvents_IC {\n\tPING = 'ping',\n\tCREATE_PATTERN = 'create-pattern',\n\tREQUEST_CURRENT_PATTERN = 'request-current-pattern',\n\tUPDATE_PATTERN = 'update-pattern'\n}\n\ntype EventT = PenpotEvent<PluginEvents_IC | UIEvents_IC>;\n\nenum PluginDataKey {\n\tIS_PATTERN = 'isPattern',\n\tSOURCE_ID = 'sourceId',\n\tPATTERN = 'pattern',\n\tIS_SOURCE = 'isSource',\n\tROW_INDEX = 'rowIndex',\n\tCOLUMN_INDEX = 'columnIndex'\n}\n\nlet selectionCache: string[] = [];\nlet lockModifications = false;\n\npenpot.ui.open('Tiling Utility', '', {\n\twidth: 300,\n\theight: 300\n});\n\nfunction getDefaultPattern(): Pattern_v1 {\n\treturn {\n\t\tversion: 1,\n\t\tmode: 'grid',\n\t\trows: 5,\n\t\tcolumns: 5,\n\t\tradius: 50,\n\t\trotateAccordingToDirection: true,\n\t\trules: []\n\t};\n}\n\n/**\n * This class is responsible for applying rules to a position.\n * Each call to process will apply the rules to the given position\n * and return the new position. The memory is used to store the\n * state of the rules. As such, the order of processing is important.\n *\n * By convention, it should be iterated over rows first, then columns.\n */\nclass RuleHandler {\n\tconstructor(\n\t\tprivate memory: Map<string, string>,\n\t\tprivate transformer: RuleTransformer<RuleKind>,\n\t\tprivate rule: Rule,\n\t\tprivate patternMode: Pattern_v1['mode']\n\t) {}\n\n\tstatic fromRule(rule: Rule, patternMode: Pattern_v1['mode']): RuleHandler {\n\t\tconst transformer = ruleTransformer[rule.type];\n\t\tif (!transformer) {\n\t\t\tthrow new Error(`Unknown rule type: ${rule.type}`);\n\t\t}\n\t\tconst memory = ruleMemoryInitializer[rule.type]();\n\t\treturn new RuleHandler(memory, transformer, rule, patternMode);\n\t}\n\n\tprocess(shapeInfo: AbstractShapeInfo) {\n\t\tconst result = this.transformer(shapeInfo, this.memory, this.rule, this.patternMode);\n\t\tthis.memory = result.memory;\n\t\t// A transformer should **NEVER** leave the object in an invalid state.\n\t\tfixShapeInfo(result.shapeInfo);\n\t\treturn result.shapeInfo;\n\t}\n}\n\ntype RuleTransformer<T extends RuleKind> = (\n\tshapeInfo: AbstractShapeInfo,\n\tmemory: Map<string, string>,\n\trule: GenericRule<T>,\n\tpatternMode: Pattern_v1['mode']\n) => { shapeInfo: AbstractShapeInfo; memory: Map<string, string> };\n\n/**\n * Applies a rule to an abstract shape object.\n */\nconst ruleTransformer: { [K in RuleKind]: RuleTransformer<K> } = {\n\trandomize: (shapeInfo, memory, rule) => {\n\t\tconst min = Math.min(rule.from, rule.to);\n\t\tconst max = Math.max(rule.from, rule.to);\n\t\tconst property = rule.property;\n\t\tconst random = Math.random();\n\t\tconst value = min + random * (max - min);\n\t\tshapeInfo[property] = shapeInfo[property] + value;\n\n\t\treturn { shapeInfo: shapeInfo, memory };\n\t},\n\toffset: (shapeInfo, memory, rule, patternMode) => {\n\t\tif (patternMode === 'revolution') {\n\t\t\tconsole.warn('Offset rule is not supported in revolution mode');\n\t\t\treturn { shapeInfo, memory };\n\t\t}\n\n\t\tconst property = rule.property;\n\t\tconst offset = rule.offset;\n\t\tconst accumulate = rule.accumulate;\n\t\tconst row = shapeInfo.row;\n\t\tconst col = shapeInfo.column;\n\n\t\tlet appliedOffset;\n\t\tlet amount;\n\t\tif (property === 'x') {\n\t\t\tamount = col;\n\t\t} else if (property === 'y') {\n\t\t\tamount = row;\n\t\t} else {\n\t\t\tthrow new Error(`Unknown offset property: ${property}`);\n\t\t}\n\t\tappliedOffset = amount * offset;\n\n\t\tif (accumulate) {\n\t\t\tfor (let i = 0; i < amount; i++) {\n\t\t\t\tappliedOffset += i * offset;\n\t\t\t}\n\t\t}\n\n\t\tif (property === 'x') {\n\t\t\tshapeInfo.x += appliedOffset;\n\t\t} else if (property === 'y') {\n\t\t\tshapeInfo.y += appliedOffset;\n\t\t} else {\n\t\t\tthrow new Error(`Unknown offset property: ${property}`);\n\t\t}\n\n\t\treturn { shapeInfo, memory };\n\t}\n};\n\n/**\n * Prevents the shape from having invalid values.\n * @param shapeInfo the shape to fix\n */\nfunction fixShapeInfo(shapeInfo: AbstractShapeInfo) {\n\tshapeInfo.rotation = shapeInfo.rotation % 360;\n\tshapeInfo.width = Math.max(0, shapeInfo.width);\n\tshapeInfo.height = Math.max(0, shapeInfo.height);\n}\n\n/**\n * Initializes the memory for a rule. It can be empty.\n */\nconst ruleMemoryInitializer: Record<RuleKind, () => Map<string, string>> = {\n\trandomize: () => new Map<string, string>(),\n\toffset: () => new Map<string, string>()\n};\n\n/**\n * Handle messages from the UI\n */\npenpot.ui.onMessage<EventT>((message) => {\n\tconsole.log('received UI message', message);\n\tif (message.type === UIEvents_IC.PING) {\n\t\tpenpot.ui.sendMessage(PluginEvents_IC.PONG);\n\t} else if (message.type === UIEvents_IC.CREATE_PATTERN) {\n\t\tcreatePattern();\n\t} else if (message.type === UIEvents_IC.REQUEST_CURRENT_PATTERN) {\n\t\tif (selectionCache.length === 0) {\n\t\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ERROR, content: 'No selection' });\n\t\t\treturn;\n\t\t}\n\t\tconst board = penpot.currentPage?.getShapeById(selectionCache[0]) as Board;\n\t\tif (board.getPluginData(PluginDataKey.IS_PATTERN) !== 'true') {\n\t\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ERROR, content: 'No pattern selected' });\n\t\t\treturn;\n\t\t}\n\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.SEND_PATTERN, content: getBoardPattern(board) });\n\t} else if (message.type === UIEvents_IC.UPDATE_PATTERN) {\n\t\tif (selectionCache.length === 0) {\n\t\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ERROR, content: 'No selection' });\n\t\t\treturn;\n\t\t}\n\t\tconst board = penpot.currentPage?.getShapeById(selectionCache[0]) as Board;\n\t\tif (board.getPluginData(PluginDataKey.IS_PATTERN) !== 'true') {\n\t\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ERROR, content: 'No pattern selected' });\n\t\t\treturn;\n\t\t}\n\t\tconst pattern = message.content as Pattern_v1;\n\t\tboard.setPluginData(PluginDataKey.PATTERN, JSON.stringify(pattern));\n\t\tdrawPattern(board);\n\t} else {\n\t\tconsole.error('Unknown message from UI:', message);\n\t}\n});\n\n/**\n * Listen to selection change\n */\npenpot.on('selectionchange', (selection) => {\n\tselectionCache = [...selection];\n\tif (selection.length === 0) {\n\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.NO_SELECTION });\n\t} else if (selection.length === 1) {\n\t\tconst shape = penpot.currentPage?.getShapeById(selection[0]);\n\n\t\tif (!shape) {\n\t\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.NO_SELECTION });\n\t\t\treturn;\n\t\t}\n\n\t\tconst isPattern = shape.getPluginData(PluginDataKey.IS_PATTERN) === 'true';\n\t\tif (isPattern) {\n\t\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.PATTERN_SELECTED });\n\t\t\tpenpot.ui.sendMessage({\n\t\t\t\ttype: PluginEvents_IC.SEND_PATTERN,\n\t\t\t\tcontent: getBoardPattern(shape as Board)\n\t\t\t});\n\t\t} else {\n\t\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ONE_SELECTION });\n\t\t}\n\t} else {\n\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.MULTIPLE_SELECTION });\n\t}\n});\n\n/**\n * Initializes a new board as a pattern, with a hidden copy of the selected shape\n * serving as the source of the pattern.\n * @returns\n */\nfunction createPattern() {\n\tconsole.info('Creating pattern');\n\tconst board = penpot.createBoard();\n\tboard.setPluginData(PluginDataKey.IS_PATTERN, 'true');\n\n\tconst selectedShape = penpot.currentPage?.getShapeById(selectionCache[0]);\n\tif (!selectedShape) {\n\t\tconsole.error('No shape selected');\n\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ERROR, content: 'No shape selected' });\n\t\treturn;\n\t}\n\n\tconst clone = selectedShape?.clone();\n\tclone.x = 0;\n\tclone.y = 0;\n\tclone.hidden = true;\n\tclone.blocked = true;\n\tclone.name += ' (source)';\n\tclone.setPluginData(PluginDataKey.IS_SOURCE, 'true');\n\n\tboard.appendChild(clone);\n\tboard.setPluginData(PluginDataKey.SOURCE_ID, clone.id);\n\tboard.name = 'Pattern';\n\tboard.fills = [];\n\n\t//TODO figure out why this does not work (creates positions issues once the clones are appended)\n\t// board.x = selectedShape.x + selectedShape.width + 200;\n\t// board.y = selectedShape.y;\n\n\tboard.setPluginData(PluginDataKey.PATTERN, JSON.stringify(getDefaultPattern()));\n\tdrawPattern(board);\n\tpenpot.ui.sendMessage({ type: PluginEvents_IC.SEND_PATTERN, content: getBoardPattern(board) });\n}\n\n/**\n *\n * @param board The board being the container of the pattern\n * @returns the parsed JSON pattern data\n */\nfunction getBoardPattern(board: Board): Pattern_v1 {\n\tif (board.getPluginData(PluginDataKey.IS_PATTERN) !== 'true') {\n\t\tconsole.error('Board is not a pattern');\n\t\tpenpot.ui.sendMessage({\n\t\t\ttype: PluginEvents_IC.ERROR,\n\t\t\tcontent: 'Board is not a pattern, returning default pattern'\n\t\t});\n\t\treturn getDefaultPattern();\n\t}\n\treturn JSON.parse(board.getPluginData(PluginDataKey.PATTERN)) as Pattern_v1;\n}\n\ninterface AbstractShapeInfo {\n\trow: number;\n\tcolumn: number;\n\tx: number;\n\ty: number;\n\trotation: number;\n\twidth: number;\n\theight: number;\n}\n\n/**\n * Clears existing shapes (except the source) in excess if any,\n * then create or modify all shapes and position them according\n * to the pattern configuration.\n * @param board The board being the container of the pattern\n * @returns\n */\nfunction drawPattern(board: Board) {\n\tif (lockModifications) {\n\t\tconsole.warn('Modifications are locked');\n\t\treturn;\n\t}\n\tlockModifications = true;\n\n\tconsole.info('Drawing pattern');\n\tif (board.getPluginData(PluginDataKey.IS_PATTERN) !== 'true') {\n\t\tconsole.error('Board is not a pattern');\n\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ERROR, content: 'Board is not a pattern' });\n\t\tlockModifications = false;\n\t\treturn;\n\t}\n\n\t// clear existing shapes\n\n\t// Positioning seems to be based on the frame (aligned with the axes)\n\t// encapsulating the rotated element, based on the rotation of the previous draw.\n\t// This is hard to compensate, so clone caching is not done for now.\n\t// No significant performance gain was noticed with caching at the time\n\t// of the implementation causing issues.\n\n\tboard.children.forEach((shape) => {\n\t\tif (shape.getPluginData(PluginDataKey.IS_SOURCE) !== 'true') {\n\t\t\tshape.remove();\n\t\t}\n\t});\n\n\tconst pattern = getBoardPattern(board);\n\tconsole.debug('Pattern:', pattern);\n\tconst validity = checkPatternValidity(pattern);\n\tif (!validity.valid) {\n\t\tconsole.error('Invalid pattern:', validity.context);\n\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ERROR, content: validity.context });\n\t\tlockModifications = false;\n\t\treturn;\n\t}\n\n\t/**\n\t * rows, then columns, then positions\n\t */\n\tconst positions = new Map<number, Map<number, AbstractShapeInfo>>();\n\n\tconst sourceId = board.getPluginData(PluginDataKey.SOURCE_ID);\n\tconst source = board.children.find((shape) => shape.id === sourceId);\n\tif (!source) {\n\t\tconsole.error('No source shape found');\n\t\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ERROR, content: 'No source shape found' });\n\t\tlockModifications = false;\n\t\treturn;\n\t}\n\n\tboard.horizontalSizing = 'fix';\n\tboard.verticalSizing = 'fix';\n\n\t// compute base positions\n\tif (pattern.mode === 'revolution') {\n\t\tconst centerOffset = pattern.radius + source.height * pattern.rows;\n\t\tboard.resize(2 * centerOffset, 2 * centerOffset);\n\n\t\t// a row is a circle\n\t\tfor (let i = 0; i < pattern.rows; i++) {\n\t\t\tconst r = pattern.radius + i * source.height;\n\t\t\tconst columnPositions = new Map<number, AbstractShapeInfo>();\n\n\t\t\t// a column is a point on the circle\n\t\t\tfor (let j = 0; j < pattern.columns; j++) {\n\t\t\t\tconst x = r * Math.cos(j * ((2 * Math.PI) / pattern.columns)) + centerOffset;\n\t\t\t\tconst y = r * Math.sin(j * ((2 * Math.PI) / pattern.columns)) + centerOffset;\n\t\t\t\tconst rot = pattern.rotateAccordingToDirection\n\t\t\t\t\t? j * (360 / pattern.columns) + 90 // +90 because the revolution starts at 3 o'clock\n\t\t\t\t\t: 0;\n\t\t\t\tcolumnPositions.set(j, {\n\t\t\t\t\trow: i,\n\t\t\t\t\tcolumn: j,\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\trotation: rot,\n\t\t\t\t\twidth: source.width,\n\t\t\t\t\theight: source.height\n\t\t\t\t});\n\t\t\t}\n\t\t\tpositions.set(i, columnPositions);\n\t\t}\n\t} else if (pattern.mode === 'grid') {\n\t\tboard.resize(source.width * pattern.columns, source.height * pattern.rows);\n\t\t// y axis\n\t\tfor (let i = 0; i < pattern.rows; i++) {\n\t\t\tconst columnPositions = new Map<number, AbstractShapeInfo>();\n\n\t\t\t// x axis\n\t\t\tfor (let j = 0; j < pattern.columns; j++) {\n\t\t\t\tconst x = j * source.width;\n\t\t\t\tconst y = i * source.height;\n\t\t\t\tcolumnPositions.set(j, {\n\t\t\t\t\trow: i,\n\t\t\t\t\tcolumn: j,\n\t\t\t\t\tx,\n\t\t\t\t\ty,\n\t\t\t\t\trotation: 0,\n\t\t\t\t\twidth: source.width,\n\t\t\t\t\theight: source.height\n\t\t\t\t});\n\t\t\t}\n\t\t\tpositions.set(i, columnPositions);\n\t\t}\n\t}\n\n\t// apply rules\n\tconst ruleHandlers: RuleHandler[] = [];\n\tfor (const rule of pattern.rules) {\n\t\tif (rule.enabled) {\n\t\t\truleHandlers.push(RuleHandler.fromRule(rule, pattern.mode));\n\t\t}\n\t}\n\n\tfor (let i = 0; i < pattern.rows; i++) {\n\t\tfor (let j = 0; j < pattern.columns; j++) {\n\t\t\tconst position = positions.get(i)?.get(j);\n\t\t\tif (!position) {\n\t\t\t\tconsole.error('No position found for', i, j);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (VERBOSE) console.debug('processing at', position);\n\n\t\t\tlet newPosition = position;\n\t\t\tfor (const handler of ruleHandlers) {\n\t\t\t\tnewPosition = handler.process(newPosition);\n\t\t\t}\n\t\t\tpositions.get(i)?.set(j, newPosition);\n\t\t}\n\t}\n\n\t// create shapes\n\tfor (let i = 0; i < pattern.rows; i++) {\n\t\tfor (let j = 0; j < pattern.columns; j++) {\n\t\t\tpenpot.ui.sendMessage({\n\t\t\t\ttype: PluginEvents_IC.SEND_PROGRESSION,\n\t\t\t\tcontent: { ratio: i / pattern.rows + (1 / pattern.rows / pattern.columns) * j }\n\t\t\t});\n\t\t\tconst position = positions.get(i)?.get(j);\n\t\t\tif (!position) {\n\t\t\t\tconsole.error('No position found for', i, j);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (VERBOSE) console.debug('updating at', position);\n\n\t\t\tconst clone: Shape | undefined = source.clone();\n\t\t\tclone.setPluginData(PluginDataKey.IS_SOURCE, 'false');\n\t\t\tclone.name = clone.name.replace(' (source)', ` (${i}, ${j})`);\n\t\t\tclone.setPluginData(PluginDataKey.ROW_INDEX, i.toString());\n\t\t\tclone.setPluginData(PluginDataKey.COLUMN_INDEX, j.toString());\n\t\t\t// Note: the clone is already a child of the board\n\t\t\tclone.hidden = false;\n\n\t\t\tif (!clone) {\n\t\t\t\tconsole.error('No clone found (this is not supposed to happen)');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// apply data\n\t\t\tclone.blocked = false;\n\t\t\tclone.resize(position.width, position.height);\n\t\t\tif (pattern.mode === 'revolution') {\n\t\t\t\tclone.x = position.x - position.width / 2 + board.x;\n\t\t\t\tclone.y = position.y - position.height / 2 + board.y;\n\t\t\t} else if (pattern.mode === 'grid') {\n\t\t\t\tclone.x = position.x + board.x;\n\t\t\t\tclone.y = position.y + board.y;\n\t\t\t}\n\t\t\tclone.rotation = source.rotation;\n\t\t\tclone.rotate(position.rotation, {\n\t\t\t\tx: clone.x + clone.width / 2,\n\t\t\t\ty: clone.y + clone.height / 2\n\t\t\t});\n\t\t\tclone.blocked = true;\n\t\t}\n\t}\n\n\tpenpot.ui.sendMessage({ type: PluginEvents_IC.ACKNOWLEDGE_UPDATE_PATTERN });\n\tlockModifications = false;\n}\n\n/**\n * Says if the pattern is valid or not. Stops at the first invalidity found.\n * @param pattern The pattern to check\n * @returns\n */\nfunction checkPatternValidity(pattern: Pattern_v1): { valid: boolean; context: string } {\n\tif (pattern.mode === 'revolution') {\n\t\tif (pattern.radius <= 0) {\n\t\t\treturn { valid: false, context: 'Radius must be greater than 0' };\n\t\t}\n\t}\n\tif (pattern.rows <= 0) {\n\t\treturn { valid: false, context: 'Rows must be greater than 0' };\n\t}\n\tif (pattern.columns <= 0) {\n\t\treturn { valid: false, context: 'Columns must be greater than 0' };\n\t}\n\treturn { valid: true, context: '' };\n}\n"],"names":["selectionCache","lockModifications","getDefaultPattern","RuleHandler","memory","transformer","rule","patternMode","ruleTransformer","ruleMemoryInitializer","shapeInfo","result","fixShapeInfo","min","max","property","random","value","offset","accumulate","row","col","appliedOffset","amount","message","_a","_b","createPattern","board","getBoardPattern","pattern","drawPattern","selection","shape","selectedShape","clone","_c","validity","checkPatternValidity","positions","sourceId","source","centerOffset","r","columnPositions","j","y","rot","i","x","ruleHandlers","position","newPosition","handler"],"mappings":"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"}